name: Build and Release
on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Release version tag (e.g. 120.0.0)'
        required: true
      is_daily:
        description: 'Is daily release?'
        type: boolean
        default: false
      force_rebuild:
        description: 'Force rebuild even if no new commits'
        type: boolean
        default: false
env:
  PYTHON_VERSION: '3.9'
  IS_DAILY: ${{ github.event.inputs.is_daily }}
jobs:
  init-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      count: ${{ steps.get-new-commits.outputs.count }}
      short_sha: ${{ steps.get-new-commits.outputs.short_sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Get new commits
        id: get-new-commits
        run: |
          if ${{ github.event.inputs.force_rebuild }}; then
            echo "count=1" >> $GITHUB_OUTPUT
          else
            echo "count=$(git log --oneline --since '24 hours ago' | wc -l)" >> $GITHUB_OUTPUT
          fi
          echo "short_sha=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_OUTPUT
      - name: Delete old release
        uses: dev-drprasad/delete-tag-and-release@v1.1
        if: ${{ env.IS_DAILY && steps.get-new-commits.outputs.count > 0 }}
        with:
          tag_name: daily_release
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set matrix
        id: set-matrix
        run: |
          items=()
          items+=('{"build": "macos", "os": "macos-latest", "arch": "aarch64"}')
          items+=('{"build": "macos", "os": "macos-13", "arch": "x86_64"}')
          items+=('{"build": "windows", "os": "windows-latest", "arch": "x86_64"}')
          if [[ -n "${{ vars.BUILD_FOR_MACOS_LEGACY }}" && -n "${{ vars.MACOS_LEGACY_CV_VERSION }}" ]]; then
            items+=('{"build": "macos", "os": "macos-13", "arch": "x86_64", "cv": "${{ vars.MACOS_LEGACY_CV_VERSION }}", "tail": "-legacy"}')
          fi
          if [[ -n "${{ vars.BUILD_FOR_WINDOWS_LEGACY }}" ]]; then
            items+=('{"build": "windows", "os": "windows-2019", "arch": "x86_64", "python": "3.8", "tail": "-legacy"}')
          fi
          
          matrix="matrix=[ $(echo ${items[@]} | tr ' ' ',') ]"
          echo $matrix >> $GITHUB_OUTPUT
  build-app:
    needs: init-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{fromJson(needs.init-matrix.outputs.matrix)}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Before setup-python
        if: ${{ matrix.build == 'macos' }}
        run: |
          # 如果指定了cv，则修改requirements-mac.txt里的opencv版本
          cvVersion="${{ matrix.cv }}"
          if [ -n "$cvVersion" ]; then
            sed -i '' "s/opencv-contrib-python-headless==.*/opencv-contrib-python-headless==${cvVersion}/" requirements-mac.txt
          fi

      - name: Set up Python - cache pip
        if: ${{ matrix.cache != 'none' }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python || env.PYTHON_VERSION }}
          cache: ${{ matrix.cache || 'pip' }}

      - name: Set up Python - no cache
        if: ${{ matrix.cache == 'none' }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python || env.PYTHON_VERSION }}

      - name: Install libraries - macOS
        if: ${{ matrix.build == 'macos' }}
        run: |
          # FIX: No package 'gobject-introspection-1.0' found
          # https://tutorials.technology/solved_errors/osx-gobject-introspection-1_0-found.html
          brew install gobject-introspection

      - name: Install dependencies - macOS
        if: ${{ matrix.build == 'macos' }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-mac.txt
          pip install pyinstaller==5.8.0

      - name: Install dependencies - Windows
        if: ${{ matrix.build == 'windows' }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller==5.8.0

      - name: Build macOS app
        if: ${{ matrix.build == 'macos' }}
        run: |
          # 使用手动输入的版本号
          bash ./build-macos.sh --create-dmg --version "${{ github.event.inputs.version_tag }}"
      - name: Build Windows app
        if: ${{ matrix.build == 'windows' }}
        run: ./build-action

      - name: Get changelog
        id: get-changelog
        if: ${{ matrix.build == 'macos' }}
        run: |
          echo 'CHANGELOG<<EOF' >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Create Release - macOS
        uses: svenstaro/upload-release-action@2.7.0
        if: ${{ matrix.build == 'macos' }}
        with:
          overwrite: true
          asset_name: MDCx-${{ github.event.inputs.version_tag }}-${{ matrix.build }}-${{ matrix.arch }}${{ matrix.tail }}-${{ needs.init-matrix.outputs.short_sha }}.dmg
          file: dist/MDCx.dmg
          prerelease: ${{ env.IS_DAILY }}
          body: ${{ env.IS_DAILY && github.event.repository.updated_at || steps.get-changelog.outputs.CHANGELOG }}
          tag: ${{ env.IS_DAILY && 'daily_release' || github.event.inputs.version_tag }}
      - name: Create Release - Windows
        uses: svenstaro/upload-release-action@2.7.0
        if: ${{ matrix.build == 'windows' }}
        with:
          overwrite: true
          asset_name: MDCx-${{ github.event.inputs.version_tag }}-${{ matrix.build }}-${{ matrix.arch }}${{ matrix.tail }}-${{ needs.init-matrix.outputs.short_sha }}.exe
          file: dist/MDCx.exe
          prerelease: ${{ env.IS_DAILY }}
          tag: ${{ env.IS_DAILY && 'daily_release' || github.event.inputs.version_tag }}
